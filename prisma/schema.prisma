// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

// profile Profile?
// this ensures a one-to-one relation between the user and profile
// link to source: https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/one-to-one-relations

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  profile  Profile?
  role     Role   @default(USER)
}

enum Condition {
  excellent
  good
  fair
  poor
}

model Stuff {
  id        Int       @id @default(autoincrement())
  name      String
  quantity  Int
  condition Condition
  owner     String
}

model Profile {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id])
  name        String 
  discord     String
  email       String
  image       String
  interests   Interests[]
  description String
}

model Interests {
  id              Int       @id @default(autoincrement())
  games           Game[]
  profileId       Int?
  Profile         Profile?   @relation(fields: [profileId], references: [id], onUpdate: Cascade)
}

model Game {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  isLiked     Boolean     @default(false)
  Interests   Interests?  @relation(fields:[interestId], references: [id], onUpdate: Cascade)  
  interestId  Int?
}
